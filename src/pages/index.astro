---
import Layout from '../layouts/Layout.astro';
import Widget from '../components/Widget.astro';
---

<Layout title="QR Code Generator - Nothing Style">
  <main class="min-h-screen bg-black text-white font-mono p-4 md:p-6 lg:p-8 flex flex-col gap-4">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      <Widget title="Local Time" className="col-span-1 md:col-span-2 lg:col-span-1">
        <div id="local-time" class="text-4xl sm:text-6xl lg:text-8xl font-dotted text-center py-2 sm:py-4 font-clock">00:00:00</div>
      </Widget>

      <Widget title="Input" className="col-span-1">
        <input
          type="text"
          id="qr-input"
          class="w-full bg-black text-white border border-zinc-700 rounded-xl px-3 py-2 sm:px-4 sm:py-2 focus:outline-none focus:border-red-500 transition-colors duration-300 text-sm sm:text-base"
          placeholder="Enter text or URL"
        />
      </Widget>

      <Widget title="Image" className="col-span-1">
        <input
          type="file"
          id="image-input"
          accept="image/*"
          class="hidden"
        />
        <label
          for="image-input"
          class="block w-full bg-black text-white rounded-xl px-3 py-2 sm:px-4 sm:py-2 text-center cursor-pointer hover:bg-red-600 transition-colors text-sm sm:text-base"
        >
          Select Image
        </label>
        <div id="image-preview" class="mt-2 sm:mt-4 h-16 sm:h-24 bg-zinc-800 rounded-xl flex items-center justify-center">
          <p class="text-zinc-500 text-sm sm:text-base">Image preview</p>
        </div>
      </Widget>
    </div>

    <Widget title="Generate">
      <button
        id="generate-btn"
        class="w-full bg-red-600 text-white font-bold py-2 sm:py-3 px-4 sm:px-6 rounded-xl transition-colors duration-300 ease-in-out hover:bg-red-700 text-sm sm:text-base"
      >
        Generate QR Code
      </button>
    </Widget>
    

    <Widget title="QR Code">
      <div id="qr-code" class="bg-zinc-800 p-2 sm:p-4 rounded-xl w-full h-32 sm:h-48 flex items-center justify-center">
        <p class="text-zinc-500 text-center text-sm sm:text-base">QR Code will appear here</p>
      </div>
    </Widget>

    <Widget title="Download">
      <button
        id="download-btn"
        class="w-full bg-zinc-800 text-white font-bold py-2 sm:py-3 px-4 sm:px-6 rounded-xl transition-colors duration-300 ease-in-out hover:bg-zinc-700 text-sm sm:text-base"
        disabled
      >
        Download QR Code
      </button>
    </Widget>
    <!-- Modal de error -->
    <div
      id="error-modal"
      class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300"
    >
      <div class="bg-zinc-800 text-white rounded-lg p-6 shadow-lg text-center w-10/12 sm:w-1/2 lg:w-1/3">
        <h2 class="text-xl font-bold mb-4">Input Error</h2>
        <p class="text-sm sm:text-base text-gray-400">Please enter text or a URL to generate a QR code.</p>
        <button
          id="close-modal-btn"
          class="mt-6 bg-red-600 text-white font-bold py-2 px-4 rounded-xl transition-colors hover:bg-red-700 text-sm sm:text-base"
        >
          Close
        </button>
      </div>
    </div>
  </main>
</Layout>

<script>
  import QRCode from 'qrcode';

  const input = document.getElementById('qr-input') as HTMLInputElement;
  const imageInput = document.getElementById('image-input') as HTMLInputElement;
  const imagePreview = document.getElementById('image-preview') as HTMLDivElement;
  const generateBtn = document.getElementById('generate-btn') as HTMLButtonElement;
  const qrCodeDiv = document.getElementById('qr-code') as HTMLDivElement;
  const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement;
  const localTimeDiv = document.getElementById('local-time') as HTMLDivElement;
  const errorModal = document.getElementById('error-modal');
  const closeModalBtn = document.getElementById('close-modal-btn');

  let selectedImage: string | null = null;

  generateBtn.addEventListener('click', () => {
    const text = input.value.trim();
    if (!text) {
      // Muestra el modal si el input está vacío
      errorModal.classList.remove('opacity-0', 'pointer-events-none');
      errorModal.classList.add('opacity-100');
    } else {
      generateQRCode(); // Llama a la función de generación si el input tiene contenido
    }
  });

  closeModalBtn.addEventListener('click', () => {
    // Oculta el modal
    errorModal.classList.remove('opacity-100');
    errorModal.classList.add('opacity-0', 'pointer-events-none');
  });

  imageInput.addEventListener('change', handleImageUpload);
  generateBtn.addEventListener('click', generateQRCode);
  downloadBtn.addEventListener('click', downloadQRCode);

  function updateLocalTime() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    localTimeDiv.textContent = `${hours}:${minutes}:${seconds}`;
  }

  // Update time immediately and then every second
  updateLocalTime();
  setInterval(updateLocalTime, 1000);

  function handleImageUpload(event: Event) {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        selectedImage = e.target?.result as string;
        imagePreview.innerHTML = `<img src="${selectedImage}" alt="Selected image" class="max-h-full max-w-full object-contain rounded-xl">`;
      };
      reader.readAsDataURL(file);
    }
  }

  async function generateQRCode() {
    const text = input.value;
    if (text) {
      try {
        const canvas = document.createElement('canvas');
        const qrSize = 300;
        canvas.width = qrSize;
        canvas.height = qrSize;
        
        await QRCode.toCanvas(canvas, text, {
          width: qrSize,
          height: qrSize,
          margin: 1,
          color: {
            dark: '#000',
            light: '#fff'
          }
        });

        if (selectedImage) {
          const ctx = canvas.getContext('2d');
          if (ctx) {
            const img = new Image();
            img.onload = () => {
              const imageSize = qrSize / 4;
              const x = (qrSize - imageSize) / 2;
              const y = (qrSize - imageSize) / 2;

              ctx.beginPath();
              ctx.arc(x + imageSize / 2, y + imageSize / 2, imageSize / 2, 0, Math.PI * 2, true);
              ctx.closePath();
              ctx.clip();

              ctx.fillStyle = '#fff';
              ctx.fillRect(x, y, imageSize, imageSize);

              ctx.drawImage(img, x, y, imageSize, imageSize);

              ctx.restore();

              updateQRCode(canvas.toDataURL());
            };
            img.src = selectedImage;
          }
        } else {
          updateQRCode(canvas.toDataURL());
        }
      } catch (err) {
        console.error(err);
      }
    }
  }

  function updateQRCode(dataURL: string) {
    qrCodeDiv.innerHTML = `<img src="${dataURL}" alt="QR Code" class="max-w-full max-h-full">`;
    downloadBtn.disabled = false;
  }

  function downloadQRCode() {
    const img = qrCodeDiv.querySelector('img');
    if (img) {
      const link = document.createElement('a');
      link.download = 'qrcode.png';
      link.href = img.src;
      link.click();
    }
  }
</script>